USE SNOWFLAKE
GO

IF EXISTS (
    SELECT * 
    FROM sys.objects 
    WHERE object_id = OBJECT_ID(N'[dbo].[Staging_FACT_SERVICE_AVAILABILITY_DAY]')
      AND type IN (N'U')
)
DROP TABLE [dbo].[Staging_FACT_SERVICE_AVAILABILITY_DAY]
GO

SELECT * 
INTO Staging_FACT_SERVICE_AVAILABILITY_DAY
FROM OPENQUERY([NABLESNOWFLAKE], '
    SELECT 
        TENANT_DK,
        DEVICE_DK,
        SITE_SK,
        SITE_DK,
        CUSTOMER_SK,
        CUSTOMER_DK,
        SERVICE_INSTANCE_ID,
        EVENT_DATE_DK,
        NUM_SERVICE_AVAILABLE,
        NUM_SERVICE_TOTAL,
        NUM_STATE_INDETERMINATE,
        NUM_STATE_NORMAL,
        NUM_STATE_WARNING,
        NUM_STATE_FAILED,
        NUM_STATE_CREATED,
        NUM_MONITORING_RUNNING,
        NUM_MONITORING_NOT_RUNNING,
        NUM_MONITORING_STALE,
        NUM_MONITORING_MISCONFIGURED,
        NUM_MONITORING_ERROR,
        NUM_MONITORING_DISCONNECTED,
        NUM_MONITORING_CREATED,
        NUM_MONITORING_SUSPENDED,
        DATE_TRUNC(''SECOND'', DSS_CREATED) AS DSS_CREATED,
        DATE_TRUNC(''SECOND'', DSS_UPDATED) AS DSS_UPDATED
    FROM SHARED_ANALYTICS_DATA.SHARED_DATA.FACT_SERVICE_AVAILABILITY_DAY
    WHERE (DSS_CREATED >= DATEADD(DAY, -3, CURRENT_TIMESTAMP()) AND DSS_CREATED <= CURRENT_TIMESTAMP())
       OR (DSS_UPDATED >= DATEADD(DAY, -3, CURRENT_TIMESTAMP()) AND DSS_UPDATED <= CURRENT_TIMESTAMP())
')


MERGE [dbo].[FACT_SERVICE_AVAILABILITY_DAY] AS TARGET
USING [dbo].[Staging_FACT_SERVICE_AVAILABILITY_DAY] AS SOURCE
    ON TARGET.TENANT_DK = SOURCE.TENANT_DK
   AND TARGET.DEVICE_DK = SOURCE.DEVICE_DK
   AND TARGET.SITE_SK = SOURCE.SITE_SK
   AND TARGET.SITE_DK = SOURCE.SITE_DK
   AND TARGET.CUSTOMER_SK = SOURCE.CUSTOMER_SK
   AND TARGET.CUSTOMER_DK = SOURCE.CUSTOMER_DK
   AND TARGET.SERVICE_INSTANCE_ID = SOURCE.SERVICE_INSTANCE_ID
   AND CONVERT(DATE, CONVERT(char(8), TARGET.EVENT_DATE_DK), 112) 
    = CONVERT(DATE, CONVERT(char(8), SOURCE.EVENT_DATE_DK), 112)
   --AND CAST(TARGET.EVENT_DATE_DK AS DATE) = CAST(SOURCE.EVENT_DATE_DK AS DATE)
   --AND DATEADD(DAY, DATEDIFF(DAY, 0, TARGET.EVENT_DATE_DK), 0) 
     --  = DATEADD(DAY, DATEDIFF(DAY, 0, SOURCE.EVENT_DATE_DK), 0)
WHEN MATCHED AND (
     TARGET.NUM_SERVICE_AVAILABLE <> SOURCE.NUM_SERVICE_AVAILABLE
  OR TARGET.NUM_SERVICE_TOTAL <> SOURCE.NUM_SERVICE_TOTAL
  OR TARGET.NUM_STATE_INDETERMINATE <> SOURCE.NUM_STATE_INDETERMINATE
  OR TARGET.NUM_STATE_NORMAL <> SOURCE.NUM_STATE_NORMAL
  OR TARGET.NUM_STATE_WARNING <> SOURCE.NUM_STATE_WARNING
  OR TARGET.NUM_STATE_FAILED <> SOURCE.NUM_STATE_FAILED
  OR TARGET.NUM_STATE_CREATED <> SOURCE.NUM_STATE_CREATED
  OR TARGET.NUM_MONITORING_RUNNING <> SOURCE.NUM_MONITORING_RUNNING
  OR TARGET.NUM_MONITORING_NOT_RUNNING <> SOURCE.NUM_MONITORING_NOT_RUNNING
  OR TARGET.NUM_MONITORING_STALE <> SOURCE.NUM_MONITORING_STALE
  OR TARGET.NUM_MONITORING_MISCONFIGURED <> SOURCE.NUM_MONITORING_MISCONFIGURED
  OR TARGET.NUM_MONITORING_ERROR <> SOURCE.NUM_MONITORING_ERROR
  OR TARGET.NUM_MONITORING_DISCONNECTED <> SOURCE.NUM_MONITORING_DISCONNECTED
  OR TARGET.NUM_MONITORING_CREATED <> SOURCE.NUM_MONITORING_CREATED
  OR TARGET.NUM_MONITORING_SUSPENDED <> SOURCE.NUM_MONITORING_SUSPENDED
  OR TARGET.DSS_UPDATED <> SOURCE.DSS_UPDATED
  OR TARGET.DSS_CREATED <> SOURCE.DSS_CREATED
)
THEN UPDATE SET
     TARGET.NUM_SERVICE_AVAILABLE = SOURCE.NUM_SERVICE_AVAILABLE
   , TARGET.NUM_SERVICE_TOTAL = SOURCE.NUM_SERVICE_TOTAL
   , TARGET.NUM_STATE_INDETERMINATE = SOURCE.NUM_STATE_INDETERMINATE
   , TARGET.NUM_STATE_NORMAL = SOURCE.NUM_STATE_NORMAL
   , TARGET.NUM_STATE_WARNING = SOURCE.NUM_STATE_WARNING
   , TARGET.NUM_STATE_FAILED = SOURCE.NUM_STATE_FAILED
   , TARGET.NUM_STATE_CREATED = SOURCE.NUM_STATE_CREATED
   , TARGET.NUM_MONITORING_RUNNING = SOURCE.NUM_MONITORING_RUNNING
   , TARGET.NUM_MONITORING_NOT_RUNNING = SOURCE.NUM_MONITORING_NOT_RUNNING
   , TARGET.NUM_MONITORING_STALE = SOURCE.NUM_MONITORING_STALE
   , TARGET.NUM_MONITORING_MISCONFIGURED = SOURCE.NUM_MONITORING_MISCONFIGURED
   , TARGET.NUM_MONITORING_ERROR = SOURCE.NUM_MONITORING_ERROR
   , TARGET.NUM_MONITORING_DISCONNECTED = SOURCE.NUM_MONITORING_DISCONNECTED
   , TARGET.NUM_MONITORING_CREATED = SOURCE.NUM_MONITORING_CREATED
   , TARGET.NUM_MONITORING_SUSPENDED = SOURCE.NUM_MONITORING_SUSPENDED
   , TARGET.DSS_UPDATED = SOURCE.DSS_UPDATED
   , TARGET.DSS_CREATED = SOURCE.DSS_CREATED
WHEN NOT MATCHED BY TARGET THEN
INSERT (
     TENANT_DK
   , DEVICE_DK
   , SITE_SK
   , SITE_DK
   , CUSTOMER_SK
   , CUSTOMER_DK
   , SERVICE_INSTANCE_ID
   , EVENT_DATE_DK
   , NUM_SERVICE_AVAILABLE
   , NUM_SERVICE_TOTAL
   , NUM_STATE_INDETERMINATE
   , NUM_STATE_NORMAL
   , NUM_STATE_WARNING
   , NUM_STATE_FAILED
   , NUM_STATE_CREATED
   , NUM_MONITORING_RUNNING
   , NUM_MONITORING_NOT_RUNNING
   , NUM_MONITORING_STALE
   , NUM_MONITORING_MISCONFIGURED
   , NUM_MONITORING_ERROR
   , NUM_MONITORING_DISCONNECTED
   , NUM_MONITORING_CREATED
   , NUM_MONITORING_SUSPENDED
   , DSS_UPDATED
   , DSS_CREATED
)
VALUES (
     SOURCE.TENANT_DK
   , SOURCE.DEVICE_DK
   , SOURCE.SITE_SK
   , SOURCE.SITE_DK
   , SOURCE.CUSTOMER_SK
   , SOURCE.CUSTOMER_DK
   , SOURCE.SERVICE_INSTANCE_ID
   , SOURCE.EVENT_DATE_DK
   , SOURCE.NUM_SERVICE_AVAILABLE
   , SOURCE.NUM_SERVICE_TOTAL
   , SOURCE.NUM_STATE_INDETERMINATE
   , SOURCE.NUM_STATE_NORMAL
   , SOURCE.NUM_STATE_WARNING
   , SOURCE.NUM_STATE_FAILED
   , SOURCE.NUM_STATE_CREATED
   , SOURCE.NUM_MONITORING_RUNNING
   , SOURCE.NUM_MONITORING_NOT_RUNNING
   , SOURCE.NUM_MONITORING_STALE
   , SOURCE.NUM_MONITORING_MISCONFIGURED
   , SOURCE.NUM_MONITORING_ERROR
   , SOURCE.NUM_MONITORING_DISCONNECTED
   , SOURCE.NUM_MONITORING_CREATED
   , SOURCE.NUM_MONITORING_SUSPENDED
   , SOURCE.DSS_UPDATED
   , SOURCE.DSS_CREATED
);
