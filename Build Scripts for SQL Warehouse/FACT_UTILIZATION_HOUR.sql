USE SNOWFLAKE
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Staging_FACT_UTILIZATION_HOUR]') AND type in (N'U'))
    DROP TABLE [dbo].[Staging_FACT_UTILIZATION_HOUR]
GO

SELECT * 
INTO [dbo].[Staging_FACT_UTILIZATION_HOUR]
FROM OPENQUERY([NABLESNOWFLAKE], '
    SELECT TENANT_DK
		,DEVICE_SK
		,DEVICE_DK
		,SITE_SK
		,SITE_DK
		,CUSTOMER_SK
		,CUSTOMER_DK
		,SCAN_DATE_DK
		,SCAN_HOUR_TIME_SK
	   -- Truncate to the hour (removes sub-minute & fractional seconds)
        ,DATE_TRUNC(''HOUR'', SCAN_HOUR_DATETIME) AS SCAN_HOUR_DATETIME
		,UTILIZATION_PROFILE_DK
		,CAST(SUBSTRING(PROFILE_NAME,1,8000) AS CHAR(8000)) AS PROFILE_NAME
		,SERVICE_INSTANCE_DK
		,MAX_UNITS_AVAILABLE
		,MIN_UNITS_AVAILABLE
		,SUM_UNITS_AVAILABLE
		,AVG_UNITS_AVAILABLE
		,MAX_UNITS_CONSUMED
		,MIN_UNITS_CONSUMED
		,SUM_UNITS_CONSUMED
		,AVG_UNITS_CONSUMED
		,MAX_UNITS_TOTAL
		,MIN_UNITS_TOTAL
		,SUM_UNITS_TOTAL
		,AVG_UNITS_TOTAL
		,MAX_USAGE_PERCENT
		,MIN_USAGE_PERCENT
		,SUM_USAGE_PERCENT
		,AVG_USAGE_PERCENT
		,ROW_COUNT
	 -- Also truncate DSS_* for sanity and version alignment
       ,DATE_TRUNC(''SECOND'', DSS_CREATED) AS DSS_CREATED
       ,DATE_TRUNC(''SECOND'', DSS_UPDATED) AS DSS_UPDATED
    FROM SHARED_ANALYTICS_DATA.SHARED_DATA.FACT_UTILIZATION_HOUR
    WHERE (DSS_CREATED >= DATEADD(DAY, -3, CURRENT_TIMESTAMP()) AND DSS_CREATED <= DATEADD(DAY, 0, CURRENT_TIMESTAMP()))
       OR (DSS_UPDATED >= DATEADD(DAY, -3, CURRENT_TIMESTAMP()) AND DSS_UPDATED <= DATEADD(DAY, 0, CURRENT_TIMESTAMP()))
')

MERGE [dbo].[FACT_UTILIZATION_HOUR] AS TARGET
USING [dbo].[Staging_FACT_UTILIZATION_HOUR] AS SOURCE
ON TARGET.TENANT_DK = SOURCE.TENANT_DK
AND TARGET.DEVICE_SK = SOURCE.DEVICE_SK
AND TARGET.DEVICE_DK = SOURCE.DEVICE_DK
AND TARGET.SITE_SK = SOURCE.SITE_SK
AND TARGET.SITE_DK = SOURCE.SITE_DK
AND TARGET.CUSTOMER_SK = SOURCE.CUSTOMER_SK
AND TARGET.CUSTOMER_DK = SOURCE.CUSTOMER_DK
AND TARGET.SCAN_DATE_DK = SOURCE.SCAN_DATE_DK
AND TARGET.SCAN_HOUR_TIME_SK = SOURCE.SCAN_HOUR_TIME_SK
AND TARGET.SCAN_HOUR_DATETIME = SOURCE.SCAN_HOUR_DATETIME
AND TARGET.UTILIZATION_PROFILE_DK = SOURCE.UTILIZATION_PROFILE_DK
AND CAST(SUBSTRING(TARGET.PROFILE_NAME,1,8000) AS CHAR(8000)) = CAST(SUBSTRING(SOURCE.PROFILE_NAME,1,8000) AS CHAR(8000))
AND TARGET.SERVICE_INSTANCE_DK = SOURCE.SERVICE_INSTANCE_DK

WHEN MATCHED AND (
    TARGET.MAX_UNITS_AVAILABLE <> SOURCE.MAX_UNITS_AVAILABLE OR
    TARGET.MIN_UNITS_AVAILABLE <> SOURCE.MIN_UNITS_AVAILABLE OR
    TARGET.SUM_UNITS_AVAILABLE <> SOURCE.SUM_UNITS_AVAILABLE OR
    TARGET.AVG_UNITS_AVAILABLE <> SOURCE.AVG_UNITS_AVAILABLE OR
    TARGET.MAX_UNITS_CONSUMED <> SOURCE.MAX_UNITS_CONSUMED OR
    TARGET.MIN_UNITS_CONSUMED <> SOURCE.MIN_UNITS_CONSUMED OR
    TARGET.SUM_UNITS_CONSUMED <> SOURCE.SUM_UNITS_CONSUMED OR
    TARGET.AVG_UNITS_CONSUMED <> SOURCE.AVG_UNITS_CONSUMED OR
    TARGET.MAX_UNITS_TOTAL <> SOURCE.MAX_UNITS_TOTAL OR
    TARGET.MIN_UNITS_TOTAL <> SOURCE.MIN_UNITS_TOTAL OR
    TARGET.SUM_UNITS_TOTAL <> SOURCE.SUM_UNITS_TOTAL OR
    TARGET.AVG_UNITS_TOTAL <> SOURCE.AVG_UNITS_TOTAL OR
    TARGET.MAX_USAGE_PERCENT <> SOURCE.MAX_USAGE_PERCENT OR
    TARGET.MIN_USAGE_PERCENT <> SOURCE.MIN_USAGE_PERCENT OR
    TARGET.SUM_USAGE_PERCENT <> SOURCE.SUM_USAGE_PERCENT OR
    TARGET.AVG_USAGE_PERCENT <> SOURCE.AVG_USAGE_PERCENT OR
    TARGET.ROW_COUNT <> SOURCE.ROW_COUNT OR
    TARGET.DSS_CREATED <> SOURCE.DSS_CREATED OR
    TARGET.DSS_UPDATED <> SOURCE.DSS_UPDATED
	)

THEN UPDATE SET
    TARGET.MAX_UNITS_AVAILABLE = SOURCE.MAX_UNITS_AVAILABLE,
    TARGET.MIN_UNITS_AVAILABLE = SOURCE.MIN_UNITS_AVAILABLE,
    TARGET.SUM_UNITS_AVAILABLE = SOURCE.SUM_UNITS_AVAILABLE,
    TARGET.AVG_UNITS_AVAILABLE = SOURCE.AVG_UNITS_AVAILABLE,
    TARGET.MAX_UNITS_CONSUMED = SOURCE.MAX_UNITS_CONSUMED,
    TARGET.MIN_UNITS_CONSUMED = SOURCE.MIN_UNITS_CONSUMED,
    TARGET.SUM_UNITS_CONSUMED = SOURCE.SUM_UNITS_CONSUMED,
    TARGET.AVG_UNITS_CONSUMED = SOURCE.AVG_UNITS_CONSUMED,
    TARGET.MAX_UNITS_TOTAL = SOURCE.MAX_UNITS_TOTAL,
    TARGET.MIN_UNITS_TOTAL = SOURCE.MIN_UNITS_TOTAL,
    TARGET.SUM_UNITS_TOTAL = SOURCE.SUM_UNITS_TOTAL,
    TARGET.AVG_UNITS_TOTAL = SOURCE.AVG_UNITS_TOTAL,
    TARGET.MAX_USAGE_PERCENT = SOURCE.MAX_USAGE_PERCENT,
    TARGET.MIN_USAGE_PERCENT = SOURCE.MIN_USAGE_PERCENT,
    TARGET.SUM_USAGE_PERCENT = SOURCE.SUM_USAGE_PERCENT,
    TARGET.AVG_USAGE_PERCENT = SOURCE.AVG_USAGE_PERCENT,
    TARGET.ROW_COUNT = SOURCE.ROW_COUNT,
    TARGET.DSS_CREATED = SOURCE.DSS_CREATED,
    TARGET.DSS_UPDATED = SOURCE.DSS_UPDATED


	WHEN NOT MATCHED BY TARGET THEN
		INSERT (
			[TENANT_DK],[DEVICE_SK],[DEVICE_DK],[SITE_SK],[SITE_DK],[CUSTOMER_SK],[CUSTOMER_DK],[SCAN_DATE_DK]
           ,[SCAN_HOUR_TIME_SK],[SCAN_HOUR_DATETIME],[UTILIZATION_PROFILE_DK],[PROFILE_NAME],[SERVICE_INSTANCE_DK],[MAX_UNITS_AVAILABLE]
           ,[MIN_UNITS_AVAILABLE],[SUM_UNITS_AVAILABLE],[AVG_UNITS_AVAILABLE],[MAX_UNITS_CONSUMED],[MIN_UNITS_CONSUMED]
           ,[SUM_UNITS_CONSUMED],[AVG_UNITS_CONSUMED],[MAX_UNITS_TOTAL],[MIN_UNITS_TOTAL],[SUM_UNITS_TOTAL],[AVG_UNITS_TOTAL]
           ,[MAX_USAGE_PERCENT],[MIN_USAGE_PERCENT],[SUM_USAGE_PERCENT],[AVG_USAGE_PERCENT],[ROW_COUNT],[DSS_CREATED],[DSS_UPDATED]
		)
		VALUES (
			SOURCE.TENANT_DK,SOURCE.DEVICE_DK,SOURCE.DEVICE_SK,SOURCE.SITE_SK,SOURCE.SITE_DK,SOURCE.CUSTOMER_SK,SOURCE.CUSTOMER_DK,SOURCE.SCAN_DATE_DK,
			SOURCE.SCAN_HOUR_TIME_SK,SOURCE.SCAN_HOUR_DATETIME,SOURCE.UTILIZATION_PROFILE_DK,CAST(SUBSTRING(SOURCE.PROFILE_NAME,1,8000) AS CHAR(8000)),SOURCE.SERVICE_INSTANCE_DK,SOURCE.MAX_UNITS_AVAILABLE,SOURCE.MIN_UNITS_AVAILABLE,
			SOURCE.SUM_UNITS_AVAILABLE,SOURCE.AVG_UNITS_AVAILABLE,SOURCE.MAX_UNITS_CONSUMED,SOURCE.MIN_UNITS_CONSUMED,SOURCE.SUM_UNITS_CONSUMED,
			SOURCE.AVG_UNITS_CONSUMED,SOURCE.MAX_UNITS_TOTAL,SOURCE.MIN_UNITS_TOTAL,SOURCE.SUM_UNITS_TOTAL,SOURCE.AVG_UNITS_TOTAL,
			SOURCE.MAX_USAGE_PERCENT,SOURCE.MIN_USAGE_PERCENT,SOURCE.SUM_USAGE_PERCENT,SOURCE.AVG_USAGE_PERCENT,SOURCE.ROW_COUNT, SOURCE.DSS_CREATED, SOURCE.DSS_UPDATED
			);

